[
    {
        "id": "f788a78067227a65",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0dfdf1e914c1f5cc",
        "type": "ui_tab",
        "name": "Aislapol Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "dcd6b90204ca17ac",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Aislapol Theme",
                "default": "#4B7930",
                "baseColor": "#009ee0",
                "baseFont": "Lucida Sans Unicode,Lucida Grande,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#009ee0",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#008ac6",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#2dc1ff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#f4f4f4",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#009ee0",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#f4f4f4",
                    "edited": true
                },
                "base-font": {
                    "value": "Lucida Sans Unicode,Lucida Grande,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Aislapol Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "6d1bf9e97b19ea27",
        "type": "ui_group",
        "name": "Máquina 15",
        "tab": "0dfdf1e914c1f5cc",
        "order": 1,
        "disp": true,
        "width": "22",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7a2333ce74658d6e",
        "type": "ui_tab",
        "name": "Detalles Máquina 15",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0ca931ec6fb88653",
        "type": "ui_group",
        "name": "Resumen",
        "tab": "7a2333ce74658d6e",
        "order": 1,
        "disp": true,
        "width": "22",
        "collapse": false,
        "className": ""
    },
    {
        "id": "09a29acb39ff18a9",
        "type": "ui_tab",
        "name": "Detalles Máquina 16",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3f5e573249780b52",
        "type": "ui_group",
        "name": "Resumen",
        "tab": "09a29acb39ff18a9",
        "order": 1,
        "disp": true,
        "width": "15",
        "collapse": false,
        "className": ""
    },
    {
        "id": "215b3d60b59062c3",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.3:4840",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": true,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "66dabf03.46121",
        "type": "OpcUa-Endpoint",
        "z": "f788a78067227a65",
        "endpoint": "opc.tcp://localhost:53530/OPCUA/SimulationServer",
        "none": false,
        "login": false
    },
    {
        "id": "8bda35d4e5cabfb0",
        "type": "ui_group",
        "name": "Máquina 16",
        "tab": "0dfdf1e914c1f5cc",
        "order": 2,
        "disp": true,
        "width": "22",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cacf42a215e27709",
        "type": "ui_tab",
        "name": "Testing",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "371b2826480241e5",
        "type": "ui_group",
        "name": "Testing Group",
        "tab": "cacf42a215e27709",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0ae249a0b685d2f6",
        "type": "ui_template",
        "z": "f788a78067227a65",
        "group": "0ca931ec6fb88653",
        "name": "",
        "order": 1,
        "width": "22",
        "height": "10",
        "format": "<style>\n    .main-container {\n        display: flex;\n        flex-direction: row;\n        width: 100%;\n    }\n\n    .left-container {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .card p {\n        margin: 0;\n    }\n\n    .card {\n        /* Add rounded corners and shadow to the card */\n        border-radius: 8px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n\n        /* Add some padding and margin to the card */\n        padding: 16px;\n        margin: 16px;\n\n        /* Use flexbox to align the contents of the card */\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .machine-name {\n        font-weight: bold;\n        font-style: italic;\n    }\n\n    .card:hover {\n        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n    }\n\n    .card-text p {\n        padding: 0.5rem;\n    }\n\n    .card .led {\n        /* Add a border and some padding to the LED */\n        border: 1px solid rgba(0, 0, 0, 0.877);\n        border-radius: 50%;\n        width: 16px;\n        height: 16px;\n        margin: 8px;\n        padding: 8px;\n        align-self: left;\n\n    }\n\n    .led-container {\n        width: 100%;\n        align-items: left;\n    }\n\n    .card .led.red {\n        /* Make the LED red when the boolean value is true */\n        background-color: rgba(255, 0, 0, 0.7);\n        align-self: left;\n    }\n\n    .card .led.green {\n        /* Make the LED green when the boolean value is false */\n        background-color: rgba(0, 255, 0, 0.7);\n        align-self: left;\n    }\n\n    .card .stats {\n        /* Add some padding and margin to the stats */\n        padding: 8px;\n        margin: 8px;\n\n        /* Use flexbox to align the stats horizontally */\n        display: flex;\n        flex-direction: row;\n        align-items: left;\n    }\n\n    .card .stats .label {\n        /* Add some margin to the labels */\n        margin: 8px;\n\n        /* Align the text to the left */\n        text-align: left;\n    }\n</style>\n\n<div class=\"main-container\">\n    <div class=\"left-container card-text\">\n        <div class=\"card\">\n            <p>Tipo de matriz: {{}}</p>\n            <p>Código matriz: {{}}</p>\n            <p>Piezas por ciclo: {{}}</p>\n        </div>\n        <div class=\"card\">\n            <p>Número de ciclo: {{}}</p>\n            <p>Tiempo de ciclo: {{}}</p>\n            <p>Tiempo de ciclo anterior: {{}}</p>\n            <p>Inicio: {{}}</p>\n            <p>Término: {{}}</p>\n        </div>\n    </div>\n    <div class=\"card card-text\">\n        <p>Cantidad producida: {{}}</p>\n        <p>Horas produciendo: {{}}</p>\n        <p>Horas detenida: {{}}</p>\n        <p>Tiempo de ciclo promedio acumulado: {{}}</p>\n        <p>Tiempo de ciclo mínimo: {{}}</p>\n        <p>Tiempo de ciclo máximo: {{}}</p>\n        <p>% de utilización: {{}}</p>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "41620427fabb1e6d",
        "type": "ui_ui_control",
        "z": "f788a78067227a65",
        "name": "",
        "events": "all",
        "x": 1220,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "ab3c3e995b11e497",
        "type": "ui_template",
        "z": "f788a78067227a65",
        "group": "3f5e573249780b52",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .main-container {\n        display: flex;\n        flex-direction: row;\n        width: 100%;\n    }\n\n    .left-container {\n        display: flex;\n        flex-direction: column;\n    }\n\n    .card p {\n        margin: 0;\n    }\n\n    .card {\n        /* Add rounded corners and shadow to the card */\n        border-radius: 8px;\n        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n\n        /* Add some padding and margin to the card */\n        padding: 16px;\n        margin: 16px;\n\n        /* Use flexbox to align the contents of the card */\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .machine-name {\n        font-weight: bold;\n        font-style: italic;\n    }\n\n    .card:hover {\n        box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n    }\n\n    .card-text p {\n        padding: 0.5rem;\n    }\n\n    .card .led {\n        /* Add a border and some padding to the LED */\n        border: 1px solid rgba(0, 0, 0, 0.877);\n        border-radius: 50%;\n        width: 16px;\n        height: 16px;\n        margin: 8px;\n        padding: 8px;\n        align-self: left;\n\n    }\n\n    .led-container {\n        width: 100%;\n        align-items: left;\n    }\n\n    .card .led.red {\n        /* Make the LED red when the boolean value is true */\n        background-color: rgba(255, 0, 0, 0.7);\n        align-self: left;\n    }\n\n    .card .led.green {\n        /* Make the LED green when the boolean value is false */\n        background-color: rgba(0, 255, 0, 0.7);\n        align-self: left;\n    }\n\n    .card .stats {\n        /* Add some padding and margin to the stats */\n        padding: 8px;\n        margin: 8px;\n\n        /* Use flexbox to align the stats horizontally */\n        display: flex;\n        flex-direction: row;\n        align-items: left;\n    }\n\n    .card .stats .label {\n        /* Add some margin to the labels */\n        margin: 8px;\n\n        /* Align the text to the left */\n        text-align: left;\n    }\n</style>\n\n<div class=\"main-container\">\n    <div class=\"left-container card-text\">\n        <div class=\"card\">\n            <p>Tipo de matriz: {{}}</p>\n            <p>Código matriz: {{}}</p>\n            <p>Piezas por ciclo: {{}}</p>\n        </div>\n        <div class=\"card\">\n            <p>Número de ciclo: {{}}</p>\n            <p>Tiempo de ciclo: {{}}</p>\n            <p>Tiempo de ciclo anterior: {{}}</p>\n            <p>Inicio: {{}}</p>\n            <p>Término: {{}}</p>\n        </div>\n    </div>\n    <div class=\"card card-text\">\n        <p>Cantidad producida: {{}}</p>\n        <p>Horas produciendo: {{}}</p>\n        <p>Horas detenida: {{}}</p>\n        <p>Tiempo de ciclo promedio acumulado: {{}}</p>\n        <p>Tiempo de ciclo mínimo: {{}}</p>\n        <p>Tiempo de ciclo máximo: {{}}</p>\n        <p>% de utilización: {{}}</p>\n    </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6b54a3d85176dd3b",
        "type": "OpcUa-Item",
        "z": "f788a78067227a65",
        "item": "ns=6;s=::OpcUA_IF:mac_status.actual_cycle_time",
        "datatype": "Int32",
        "value": "",
        "name": "Item - tiempo de ciclo actual",
        "x": 320,
        "y": 320,
        "wires": [
            [
                "6ff6c67bf3063c80"
            ]
        ]
    },
    {
        "id": "2dd2dd3c.5d9b72",
        "type": "inject",
        "z": "f788a78067227a65",
        "name": "Read",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "6b54a3d85176dd3b",
                "631749ee0c3b7f3a",
                "0c758f34ca4c2cb8",
                "0c53704116c78f7e",
                "78668abcadaa0a8d"
            ]
        ]
    },
    {
        "id": "631749ee0c3b7f3a",
        "type": "OpcUa-Item",
        "z": "f788a78067227a65",
        "item": "ns=6;s=::OpcUA_IF:mac_status.running",
        "datatype": "Boolean",
        "value": "",
        "name": "Item - On/Off Status",
        "x": 300,
        "y": 360,
        "wires": [
            [
                "6ff6c67bf3063c80"
            ]
        ]
    },
    {
        "id": "6ff6c67bf3063c80",
        "type": "OpcUa-Client",
        "z": "f788a78067227a65",
        "endpoint": "215b3d60b59062c3",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "5",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 560,
        "y": 340,
        "wires": [
            [
                "d1b782dc2590011a"
            ]
        ]
    },
    {
        "id": "ad647a66e5a83048",
        "type": "debug",
        "z": "f788a78067227a65",
        "name": "Client Read value Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 500,
        "wires": []
    },
    {
        "id": "d1b782dc2590011a",
        "type": "join",
        "z": "f788a78067227a65",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "5",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 340,
        "wires": [
            [
                "8dcfe0fe921ca3b5"
            ]
        ]
    },
    {
        "id": "8dcfe0fe921ca3b5",
        "type": "function",
        "z": "f788a78067227a65",
        "name": "Machine 1 JSON Formating",
        "func": "//Setting latest values\nvar running = msg.payload[\"ns=6;s=::OpcUA_IF:mac_status.running\"];\nvar cycleTime = msg.payload[\"ns=6;s=::OpcUA_IF:mac_status.actual_cycle_time\"] / 1000;\ncycleTime = Math.floor(cycleTime);\nvar recipe = msg.payload[\"ns=6;s=::OpcUA_IF:last_recipe\"];\nvar numCycles = msg.payload[\"ns=6;s=::OpcUA_IF:life_cycles\"];\nvar lastCycleTime = msg.payload[\"ns=6;s=::OpcUA_IF:mac_status.last_cycle_time\"] / 1000;\nlastCycleTime = Math.floor(lastCycleTime);\nvar warning = false;\n\n//Checking for warning state\nif (global.get(\"bLastStateMac15\")) {\n    global.set(\"bLastStateMac15\", running);\n    global.set(\"dLastChangedTimeMac15\", new Date().getTime());\n};\n\nif (running !== global.get(\"bLastStateMac15\")){\n    global.set(\"bLastStateMac15\", running);\n    global.set(\"dLastChangedTimeMac15\", new Date().getTime());\n}else{\n    let currentTime = new Date().getTime();\n    if (!running && (currentTime - global.get(\"dLastChangedTimeMac15\") > 7200000)) {\n        warning = true;\n    }\n};\n\n\nvar minCycleTime=\"N/A\";\nvar maxCycleTime=\"N/A\";\n\n\n// set min time\nif (global.get(\"minCycleTimeMac15\")){\n    minCycleTime = Math.min(lastCycleTime, global.get(\"minCycleTimeMac15\"));\n    global.set(\"minCycleTimeMac15\", minCycleTime);\n} else{\n    global.set(\"minCycleTimeMac15\", lastCycleTime);\n};\n//set max time\nif (global.get(\"maxCycleTimeMac15\")) {\n    maxCycleTime = Math.max(lastCycleTime, global.get(\"maxCycleTimeMac15\"));\n    global.set(\"maxCycleTimeMac15\", maxCycleTime);\n} else {\n    global.set(\"maxCycleTimeMac15\", lastCycleTime);\n};\n\n\nvar machine = {\n    \"recipe\": recipe,\n    \"numCycles\": numCycles,\n    \"cycleTime\": cycleTime,\n    \"minCycleTime\": minCycleTime,\n    \"maxCycleTime\": maxCycleTime,\n    \"isRunning\": running,\n    \"warning\": warning\n};\nmsg.payload=machine;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 340,
        "wires": [
            [
                "4507e6f19479d369",
                "f614624d5feae44d"
            ]
        ]
    },
    {
        "id": "4a13fd4f9414181c",
        "type": "OpcUa-Item",
        "z": "f788a78067227a65",
        "item": "ns=6;s=::OpcUA_IF:mac_status.last_cycle_time",
        "datatype": "Int32",
        "value": "",
        "name": "Item - último tiempo de ciclo",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "f141a83ecbd0aa53"
            ]
        ]
    },
    {
        "id": "f141a83ecbd0aa53",
        "type": "OpcUa-Client",
        "z": "f788a78067227a65",
        "endpoint": "215b3d60b59062c3",
        "action": "subscribe",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "5",
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "0c8551918bfe32e2"
            ]
        ]
    },
    {
        "id": "0c8551918bfe32e2",
        "type": "function",
        "z": "f788a78067227a65",
        "name": "Machine 1 JSON Formating",
        "func": "var lastCycleTime = msg.payload > 500000 ? 0 : msg.payload;\n\nlastCycleTime = lastCycleTime/1000\n\nmsg.payload=lastCycleTime\nmsg.topic=\"Tiempo de ciclo\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 420,
        "wires": [
            [
                "ebcaa41dce7ebc67"
            ]
        ]
    },
    {
        "id": "abb133c7592b7730",
        "type": "inject",
        "z": "f788a78067227a65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 420,
        "wires": [
            [
                "4a13fd4f9414181c"
            ]
        ]
    },
    {
        "id": "ebcaa41dce7ebc67",
        "type": "ui_chart",
        "z": "f788a78067227a65",
        "name": "",
        "group": "6d1bf9e97b19ea27",
        "order": 2,
        "width": "12",
        "height": "9",
        "label": "Tiempo de Ciclo",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0c758f34ca4c2cb8",
        "type": "OpcUa-Item",
        "z": "f788a78067227a65",
        "item": "ns=6;s=::OpcUA_IF:last_recipe",
        "datatype": "String",
        "value": "",
        "name": "Item - recipe",
        "x": 270,
        "y": 280,
        "wires": [
            [
                "6ff6c67bf3063c80"
            ]
        ]
    },
    {
        "id": "0c53704116c78f7e",
        "type": "OpcUa-Item",
        "z": "f788a78067227a65",
        "item": "ns=6;s=::OpcUA_IF:life_cycles",
        "datatype": "Int32",
        "value": "",
        "name": "Item - número de ciclos",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "6ff6c67bf3063c80"
            ]
        ]
    },
    {
        "id": "78668abcadaa0a8d",
        "type": "OpcUa-Item",
        "z": "f788a78067227a65",
        "item": "ns=6;s=::OpcUA_IF:mac_status.last_cycle_time",
        "datatype": "Int32",
        "value": "",
        "name": "Item - último tiempo de ciclo",
        "x": 320,
        "y": 200,
        "wires": [
            [
                "6ff6c67bf3063c80"
            ]
        ]
    },
    {
        "id": "f6f54112.c9ed4",
        "type": "catch",
        "z": "f788a78067227a65",
        "name": "",
        "scope": null,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "3b51ffbd.c887f"
            ]
        ]
    },
    {
        "id": "3b51ffbd.c887f",
        "type": "debug",
        "z": "f788a78067227a65",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 40,
        "wires": []
    },
    {
        "id": "ebe7bf76279201e2",
        "type": "ui_gauge",
        "z": "f788a78067227a65",
        "name": "",
        "group": "0ca931ec6fb88653",
        "order": 4,
        "width": "8",
        "height": "6",
        "gtype": "gage",
        "title": "Presión de Aire de llenado",
        "label": "bar",
        "format": "{{value | number:1}}",
        "min": "-0.5",
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0",
        "seg2": "0.5",
        "diff": false,
        "className": "",
        "x": 1200,
        "y": 840,
        "wires": []
    },
    {
        "id": "1bd9207bb04c60e1",
        "type": "ui_gauge",
        "z": "f788a78067227a65",
        "name": "",
        "group": "0ca931ec6fb88653",
        "order": 5,
        "width": "8",
        "height": "6",
        "gtype": "gage",
        "title": "Presión de Desmoldeo",
        "label": "bar",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1180,
        "y": 900,
        "wires": []
    },
    {
        "id": "4507e6f19479d369",
        "type": "ui_machinecard",
        "z": "f788a78067227a65",
        "group": "6d1bf9e97b19ea27",
        "order": 1,
        "width": "8",
        "height": "9",
        "name": "Maquina 15",
        "machineName": "Máquina 15",
        "warning": "1",
        "x": 970,
        "y": 120,
        "wires": [
            [
                "41620427fabb1e6d"
            ]
        ]
    },
    {
        "id": "f614624d5feae44d",
        "type": "ui_machinecard",
        "z": "f788a78067227a65",
        "group": "8bda35d4e5cabfb0",
        "order": 1,
        "width": "8",
        "height": "9",
        "name": "Maquina 16",
        "machineName": "Máquina 16",
        "warning": "2",
        "x": 970,
        "y": 220,
        "wires": [
            [
                "41620427fabb1e6d"
            ]
        ]
    },
    {
        "id": "a2849f5fd82c1805",
        "type": "ui_chart",
        "z": "f788a78067227a65",
        "name": "",
        "group": "0ca931ec6fb88653",
        "order": 2,
        "width": "10",
        "height": "6",
        "label": "Temperatura",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm",
        "interpolate": "bezier",
        "nodata": "No Data",
        "dot": true,
        "ymin": "0",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "100",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1150,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "6a2c070ac330bf12",
        "type": "ui_lineargauge",
        "z": "f788a78067227a65",
        "group": "0ca931ec6fb88653",
        "order": 3,
        "width": "2",
        "height": "6",
        "name": "",
        "colorLowArea": "#ffffc0",
        "colorMidArea": "#99ff99",
        "colorHighArea": "#ff8080",
        "unit": "°C",
        "x": 1150,
        "y": 740,
        "wires": []
    },
    {
        "id": "7e499c4d18dc65ee",
        "type": "inject",
        "z": "f788a78067227a65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "highlimit",
                "v": "180",
                "vt": "num"
            },
            {
                "p": "lowlimit",
                "v": "20",
                "vt": "num"
            },
            {
                "p": "setpoint",
                "v": "55",
                "vt": "num"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Temperature",
        "payload": "60",
        "payloadType": "num",
        "x": 790,
        "y": 700,
        "wires": [
            [
                "f41e39ca9dd90c40"
            ]
        ]
    },
    {
        "id": "f41e39ca9dd90c40",
        "type": "function",
        "z": "f788a78067227a65",
        "name": "function 3",
        "func": "function randn_bm() {\n    let u = 0, v = 0;\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while (v === 0) v = Math.random();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randn_bm() // resample between 0 and 1\n    return num\n}\n\nvar randTemp = randn_bm()*100;\nrandTemp = Math.floor(randTemp);\nmsg.payload=randTemp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 700,
        "wires": [
            [
                "a2849f5fd82c1805",
                "6a2c070ac330bf12"
            ]
        ]
    },
    {
        "id": "65cbdf7aa3bc734e",
        "type": "inject",
        "z": "f788a78067227a65",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 840,
        "wires": [
            [
                "ac85c152db6e1eb8",
                "c093944942501c5a"
            ]
        ]
    },
    {
        "id": "ac85c152db6e1eb8",
        "type": "function",
        "z": "f788a78067227a65",
        "name": "function 4",
        "func": "function randn_bm() {\n    let u = 0, v = 0;\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while (v === 0) v = Math.random();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randn_bm() // resample between 0 and 1\n    return num\n}\n\nvar randPress = randn_bm()*1.5-0.5;\nmsg.payload=randPress;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 840,
        "wires": [
            [
                "ebe7bf76279201e2"
            ]
        ]
    },
    {
        "id": "c093944942501c5a",
        "type": "function",
        "z": "f788a78067227a65",
        "name": "function 5",
        "func": "function randn_bm() {\n    let u = 0, v = 0;\n    while (u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while (v === 0) v = Math.random();\n    let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randn_bm() // resample between 0 and 1\n    return num\n}\n\nvar randPress = randn_bm()*10;\nrandPress = Math.floor(randPress);\nmsg.payload=randPress;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 900,
        "wires": [
            [
                "1bd9207bb04c60e1"
            ]
        ]
    }
]